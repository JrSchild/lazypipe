{
  "name": "lazypipe",
  "description": "Use to create an immutable, lazily initialized pipeline from a series of streams.",
  "version": "0.1.0",
  "homepage": "https://github.com/OverZealous/lazypipe",
  "repository": {
    "type": "git",
    "url": "git://github.com/OverZealous/lazypipe.git"
  },
  "author": {
    "name": "Phil DeJarnett",
    "url": "http://overzealous.com/"
  },
  "main": "./index.js",
  "keywords": [
    "gulpplugin"
  ],
  "dependencies": {
    "stream-combiner": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "event-stream": "~3.1.0"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/OverZealous/lazypipe/raw/master/LICENSE"
    }
  ],
  "readme": "![status](https://secure.travis-ci.org/OverZealous/lazypipe.png?branch=master)\n\nlazypipe\n=======\n\nLazypipe allows you to create an immutable, lazily-initialized pipeline.  It's designed to be used in an environment where you want to reuse partial pipelines, such as with [gulp](http://gulpjs.com).\n\nThis module returns a function that can be used to start building a lazypipe.  Individual steps are added via the `.pipe()` method.  At any point, a new lazypipe can be built by adding to an existing one, without affecting the previous lazypipe.  Lazypipes can even be used as steps within another lazypipe.\n\nOnce the partial pipeline is ready to use, call the last result from `.pipe()` directly as a function (e.g.: `.pipe()()`).\n\nUsage\n-----\n\nInstall using:\n\n    npm i --save-dev lazypipe\n\nThen create lazypipes like so:\n\n```js\n// Example usage within a gulpfile\nvar lazypipe = require('lazypipe');\n\n...\n\n// initialize a lazypipe\nvar jsHintTasks = lazypipe()\n    // adding a pipeline step, notice the stream has not been initialized!\n    .pipe(jshint)\n    // adding a step with an argument\n    .pipe(jshint.reporter, 'jshint-stylish');\n \n// this is OK, because lazypipes are immutable\n// jsHintTasks will _not_ be affected by the addition.\nvar jsTasks = jsHintTasks\n    .pipe(gulp.dest, 'build/js');\n\n\n// now using the lazypipes\ngulp.task('jsHint', function() {\n    gulp.src('js/**/*.js').pipe(jsHintTasks());\n});\n\ngulp.task('build', function() {\n    // for example only!\n    return gulp.src('js/**/*.js').pipe(jsTasks());\n});\n\ngulp.task('default', ['build'], function() {\n    // using gulp-watch\n    watch('js/**/*.js').pipe(jsTasks());\n});\n```\n\n[Full docs are available on github.](https://github.com/OverZealous/lazypipe)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/OverZealous/lazypipe/issues"
  },
  "_id": "lazypipe@0.1.0",
  "_from": "lazypipe@*"
}
